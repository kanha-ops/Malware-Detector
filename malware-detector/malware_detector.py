import tkinter as tk
from tkinter import filedialog
import hashlib
from tkinter import *
import requests
import json
import os
win = Tk()
hash_path = ' ' # --> ADD PATH OF MALWARE.TXT
md5_hash = None
class MalwareDetectionApp:
    def __init__(self):
        self.api_key = " "  # --> ADD VIRUS TOTAL API KEY 
        self.scan_url = "https://www.virustotal.com/vtapi/v2/file/scan"
        self.report_url = "https://www.virustotal.com/vtapi/v2/file/report"
        self.md5_hash=md5_hash

        self.create_widgets()


    
    def select_file(self):
        file_path = filedialog.askopenfilename(initialdir="/", title="Select file", filetypes=[("All files", "*.*")])
        if file_path:
            self.file_path = file_path
            self.path_lebel.config(text=f"Selected file: {file_path}")

            name = os.path.basename(self.file_path)
            self.name_lebel1.config(text=name.split('.')[0])

            size = os.path.getsize(self.file_path)
            self.size_lebel1.config(text=f"{size/1024} kb")

            with open(self.file_path, 'rb') as file_obj:
                file_contents = file_obj.read()
                self.md5_hash = hashlib.md5(file_contents).hexdigest()
            self.hash_lebel1.config(text=self.md5_hash)

    
    def reset(self):
        self.path_lebel.config(text="")
        self.name_lebel1.config(text="")
        self.size_lebel1.config(text="")
        self.hash_lebel1.config(text="")
        self.result_lebel1.config(text="")
        self.md5_hash = None
        self.file_path = None




    def offline_scan(self):
       
       with open(hash_path,'r') as file_obj:
            self.file_content = file_obj.read()

            
       if self.md5_hash == None:
           self.result_lebel1.config(text="Please select a file first.")

       elif (self.md5_hash in self.file_content ):
           self.result_lebel1.config(text="Malware Detected")   

       else:
           self.result_lebel1.config(text="File is safe")
            


    def scan_file(self):
        if(self.file_path==None):
            self.result_lebel1.config(text="Please select a file first.")
        elif hasattr(self, 'file_path'):
            try:
                with open(self.file_path, 'rb') as file:
                    files = {'file': (self.file_path, file)}
                    params = {'apikey': self.api_key}
                    response = requests.post(self.scan_url, files=files, params=params)

                    # Check if the file was successfully submitted for scanning
                    if response.status_code == 200:
                        resource = response.json()['resource']
                        self.result_lebel1.config(text=f"File submitted for scanning. Resource: {resource}")
                        self.check_scan_result(resource)
                    else:
                        self.result_lebel1.config(text=f"Error submitting file: {response.text}")
            except Exception as e:
                self.result_lebel1.config(text=f"Error: {str(e)}")
        else:
            self.result_lebel1.config(text="Please select a file first.")

    
    def check_scan_result(self, resource):
        params = {'apikey': self.api_key, 'resource': resource}
        response = requests.get(self.report_url, params=params)
        report = response.text
        report = json.loads(report)


        if response.status_code == 200:
            scan_result = response.json()
            if scan_result['response_code'] == 1:
                positives = scan_result['positives']
                total = scan_result['total']
                if positives > 0:
                    self.result_lebel1.config(text=f"The file is malicious! Detection rate: {positives}/{total}")
                else:
                    self.result_lebel1.config(text="The file is clean.")
            else:
                self.result_lebel1.config(text="Scan not completed. Try again later.")
        else:
            self.result_lebel1.config(text=f"Error checking scan result: {response.text}")

    

    def create_widgets(self):
        win.title("Malware Detector")
        win.config(bg ="light blue")
        win.geometry("700x550")

        self.name_lebel = Label(win,text ="Malware Detector",
                   font=("Time New Roman",30,"bold"))
        self.name_lebel.place(x=25,y=50,height=50,width=650)

        select_button = Button(win,text="Select",
                     font=("Times New Roman",20,"bold"),command=self.select_file)
        select_button.place(x=30,y = 120,height=50,width=100)

        scan_button1 = Button(win,text="Reset",
                     font=("Times New Roman",20,"bold"),command=self.reset)
        scan_button1.place(x=170,y = 120,height=50,width=100)

        scan_button = Button(win,text="Scan Offline",
                     font=("Times New Roman",20,"bold"),command=self.offline_scan)
        scan_button.place(x=320,y = 120,height=50,width=150)

        scan_button = Button(win,text="Scan Online",
                     font=("Times New Roman",20,"bold"),command=self.scan_file)
        scan_button.place(x=520,y = 120,height=50,width=150)

        self.path_lebel = Label(win,text="",
                                font=("Time New Roman",15))
        self.path_lebel.place(x=25,y=190,height=50,width=650)




        self.name_lebel = Label(win,text ="File Name",
                   font=("Time New Roman",20))
        self.name_lebel.place(x=25,y=260,height=50,width=210)

        self.name_lebel1 = Label(win,text ="",
                   font=("Time New Roman",15))
        self.name_lebel1.place(x=250,y=260,height=50,width=425)

        self.size_lebel = Label(win,text ="File Size",
                   font=("Time New Roman",20))
        self.size_lebel.place(x=25,y=330,height=50,width=210)

        self.size_lebel1 = Label(win,text ="",
                   font=("Time New Roman",15))
        self.size_lebel1.place(x=250,y=330,height=50,width=425)

        self.hash_lebel = Label(win,text ="File Hash",
                   font=("Time New Roman",20))
        self.hash_lebel.place(x=25,y=400,height=50,width=210)

        self.hash_lebel1 = Label(win,text ="",
                   font=("Time New Roman",15))
        self.hash_lebel1.place(x=250,y=400,height=50,width=425)

        self.result_lebel = Label(win,text="Result" ,
                             font=("Time New Roman",20))
        self.result_lebel.place(x=25,y=470,height=50,width=210)

        self.result_lebel1 = Label(win,text="" ,
                             font=("Time New Roman",15))
        self.result_lebel1.place(x=250,y=470,height=50,width=425)



if __name__ == "__main__":
    
    app = MalwareDetectionApp()
    win.mainloop()
